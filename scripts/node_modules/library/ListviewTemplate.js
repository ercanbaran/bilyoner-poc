//------------------------------------------------------------------------------
//
//     This code was auto generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//------------------------------------------------------------------------------

const extend = require('js-base/core/extend');
const FlexLayout = require('sf-core/ui/flexlayout');
const Color = require('sf-core/ui/color');
const Label = require('sf-core/ui/label');
const TextAlignment = require('sf-core/ui/textalignment');
const Font = require('sf-core/ui/font');
const ImageView = require('sf-core/ui/imageview');
const Image = require('sf-core/ui/image');
const ImageFillType = require('sf-core/ui/imagefilltype');

const BetTemplate = require("../../components/BetTemplate");

const getCombinedStyle = require("library/styler-builder").getCombinedStyle;

const ListviewTemplate = extend(FlexLayout)(
  //constructor
  function(_super, props) {
    // initalizes super class for this component scope
    _super(this, props);

    const layout_rootTopStyle = getCombinedStyle(".flexLayout", {
      width: NaN,
      height: 20,
      backgroundColor: Color.create(255, 0, 0, 0),
      id: 10,
      flexDirection: FlexLayout.FlexDirection.ROW
    });
    var layout_rootTop = new FlexLayout(layout_rootTopStyle);
    this.addChild(layout_rootTop);

    layout_rootTop.children = {};
    layout_rootTop.children["labelDateStr"] = (function() {
      const labelDateStrStyle = getCombinedStyle(".label", {
        width: NaN,
        height: NaN,
        marginLeft: 10,
        backgroundColor: Color.create(0, 255, 255, 255),
        textColor: Color.create(255, 255, 255, 255),
        text: "Bugun",
        textAlignment: TextAlignment.MIDLEFT,
        id: 100,
        flexGrow: 1,
        font: Font.create(Font.DEFAULT, 10, Font.NORMAL)

      });
      var labelDateStr = new Label(labelDateStrStyle);
      if (labelDateStrStyle.scrollEnabled === false)
        labelDateStr.ios && (labelDateStr.ios.scrollEnabled = false);
      this.labelDateStr = labelDateStr;

      return labelDateStr;
    }).call(this);
    layout_rootTop.addChild(layout_rootTop.children["labelDateStr"]);

    layout_rootTop.children["labelTimeStr"] = (function() {
      const labelTimeStrStyle = getCombinedStyle(".label", {
        width: NaN,
        height: NaN,
        marginLeft: NaN,
        backgroundColor: Color.create(0, 255, 255, 255),
        textColor: Color.create(255, 255, 255, 255),
        text: "12:30",
        textAlignment: TextAlignment.MIDRIGHT,
        marginRight: 10,
        id: 101,
        flexGrow: 1,
        font: Font.create(Font.DEFAULT, 10, Font.NORMAL)

      });
      var labelTimeStr = new Label(labelTimeStrStyle);
      if (labelTimeStrStyle.scrollEnabled === false)
        labelTimeStr.ios && (labelTimeStr.ios.scrollEnabled = false);
      this.labelTimeStr = labelTimeStr;

      return labelTimeStr;
    }).call(this);
    layout_rootTop.addChild(layout_rootTop.children["labelTimeStr"]);

    const layout_rootBottomStyle = getCombinedStyle(".flexLayout", {
      width: NaN,
      height: NaN,
      backgroundColor: Color.create(0, 47, 98, 14),
      id: 20,
      flexGrow: 1,
      flexDirection: FlexLayout.FlexDirection.ROW
    });
    var layout_rootBottom = new FlexLayout(layout_rootBottomStyle);
    this.addChild(layout_rootBottom);

    layout_rootBottom.children = {};
    layout_rootBottom.children["label_left"] = (function() {
      const label_leftStyle = getCombinedStyle(".label", {
        width: 15,
        height: NaN,
        backgroundColor: Color.create(255, 252, 89, 31),
        textAlignment: TextAlignment.MIDCENTER,
        textColor: Color.create(255, 255, 255, 255),
        text: "MS",
        id: 200,
        flexGrow: 0,
        font: Font.create(Font.DEFAULT, 8, Font.NORMAL)

      });
      var label_left = new Label(label_leftStyle);
      if (label_leftStyle.scrollEnabled === false)
        label_left.ios && (label_left.ios.scrollEnabled = false);
      this.label_left = label_left;

      return label_left;
    }).call(this);
    layout_rootBottom.addChild(layout_rootBottom.children["label_left"]);

    layout_rootBottom.children["layout_center"] = (function() {
      const layout_centerStyle = getCombinedStyle(".flexLayout", {
        width: NaN,
        height: NaN,
        backgroundColor: Color.create(0, 255, 255, 255),
        id: 201,
        flexGrow: 1,
        flexDirection: FlexLayout.FlexDirection.COLUMN
      });
      var layout_center = new FlexLayout(layout_centerStyle);
      layout_center.children = {};
      layout_center.children["layout_centerTop"] = (function() {
        const layout_centerTopStyle = getCombinedStyle(".flexLayout", {
          width: NaN,
          height: NaN,
          backgroundColor: Color.create(0, 255, 255, 255),
          marginRight: 5,
          id: 2000,
          flexGrow: 1,
          flexDirection: FlexLayout.FlexDirection.ROW
        });
        var layout_centerTop = new FlexLayout(layout_centerTopStyle);
        layout_centerTop.children = {};
        layout_centerTop.children["label_MCode"] = (function() {
          const label_MCodeStyle = getCombinedStyle(".label", {
            width: 30,
            height: NaN,
            backgroundColor: Color.create(0, 255, 255, 255),
            textColor: Color.create(255, 235, 233, 52),
            marginLeft: 5,
            text: "501",
            id: 20000,
            alignSelf: FlexLayout.AlignSelf.STRETCH,
            font: Font.create(Font.DEFAULT, 14, Font.BOLD)

          });
          var label_MCode = new Label(label_MCodeStyle);
          if (label_MCodeStyle.scrollEnabled === false)
            label_MCode.ios && (label_MCode.ios.scrollEnabled = false);
          this.label_MCode = label_MCode;

          return label_MCode;
        }).call(this);
        layout_centerTop.addChild(layout_centerTop.children["label_MCode"]);
        layout_centerTop.children["label_teams"] = (function() {
          const label_teamsStyle = getCombinedStyle(".label", {
            width: NaN,
            height: NaN,
            backgroundColor: Color.create(0, 255, 255, 255),
            textColor: Color.create(255, 255, 255, 255),
            marginLeft: 2,
            text: "Western Sdney - Wellington Phonix",
            id: 20001,
            alignSelf: FlexLayout.AlignSelf.STRETCH,
            flexGrow: 1,
            font: Font.create(Font.DEFAULT, 14, Font.BOLD)

          });
          var label_teams = new Label(label_teamsStyle);
          if (label_teamsStyle.scrollEnabled === false)
            label_teams.ios && (label_teams.ios.scrollEnabled = false);
          this.label_teams = label_teams;

          return label_teams;
        }).call(this);
        layout_centerTop.addChild(layout_centerTop.children["label_teams"]);
        layout_centerTop.children["layout_league2"] = (function() {
          const layout_league2Style = getCombinedStyle(".flexLayout", {
            width: 50,
            height: NaN,
            backgroundColor: Color.create(64, 255, 255, 255),
            marginLeft: 3,
            marginRight: NaN,
            marginBottom: 5,
            marginTop: 5,
            borderRadius: 8,
            id: 20002,
            flexDirection: FlexLayout.FlexDirection.ROW
          });
          var layout_league2 = new FlexLayout(layout_league2Style);
          this.layout_league2 = layout_league2;
          layout_league2.children = {};
          layout_league2.children["label_league"] = (function() {
            const label_leagueStyle = getCombinedStyle(".label", {
              width: NaN,
              backgroundColor: Color.create(0, 255, 255, 255),
              marginLeft: NaN,
              marginRight: NaN,
              text: "AUSC",
              textAlignment: TextAlignment.MIDCENTER,
              height: NaN,
              textColor: Color.create(255, 241, 240, 53),
              left: 2,
              id: 200000,
              flexGrow: 1,
              font: Font.create(Font.DEFAULT, 10, Font.BOLD)

            });
            var label_league = new Label(label_leagueStyle);
            if (label_leagueStyle.scrollEnabled === false)
              label_league.ios && (label_league.ios.scrollEnabled = false);
            this.label_league = label_league;

            return label_league;
          }).call(this);
          layout_league2.addChild(layout_league2.children["label_league"]);
          layout_league2.children["layout_divider"] = (function() {
            const layout_dividerStyle = getCombinedStyle(".flexLayout", {
              width: 1,
              height: NaN,
              backgroundColor: Color.create(255, 118, 140, 95),
              marginTop: 2,
              marginBottom: 2,
              id: 200001
            });
            var layout_divider = new FlexLayout(layout_dividerStyle);

            return layout_divider;
          }).call(this);
          layout_league2.addChild(layout_league2.children["layout_divider"]);
          layout_league2.children["label_mbs"] = (function() {
            const label_mbsStyle = getCombinedStyle(".label", {
              width: 12,
              backgroundColor: Color.create(0, 255, 255, 255),
              marginLeft: 1,
              marginRight: 1,
              text: "4",
              textAlignment: TextAlignment.MIDLEFT,
              height: NaN,
              textColor: Color.create(255, 255, 255, 255),
              left: NaN,
              id: 200002,
              font: Font.create(Font.DEFAULT, 12, Font.BOLD)

            });
            var label_mbs = new Label(label_mbsStyle);
            if (label_mbsStyle.scrollEnabled === false)
              label_mbs.ios && (label_mbs.ios.scrollEnabled = false);
            this.label_mbs = label_mbs;

            return label_mbs;
          }).call(this);
          layout_league2.addChild(layout_league2.children["label_mbs"]);

          return layout_league2;
        }).call(this);
        layout_centerTop.addChild(layout_centerTop.children["layout_league2"]);

        return layout_centerTop;
      }).call(this);
      layout_center.addChild(layout_center.children["layout_centerTop"]);
      layout_center.children["layout_centerBottom"] = (function() {
        const layout_centerBottomStyle = getCombinedStyle(".flexLayout", {
          height: NaN,
          width: NaN,
          backgroundColor: Color.create(0, 136, 0, 0),
          id: 2001,
          marginRight: 5,
          flexGrow: 1,
          alignItems: FlexLayout.AlignItems.STRETCH,
          justifyContent: FlexLayout.JustifyContent.FLEX_START,
          flexDirection: FlexLayout.FlexDirection.ROW
        });
        var layout_centerBottom = new FlexLayout(layout_centerBottomStyle);
        layout_centerBottom.children = {};
        layout_centerBottom.children["bet_1"] = (function() {
          const bet_1Style = getCombinedStyle(".flexLayout", {
            left: NaN,
            top: NaN,
            width: NaN,
            height: 25,
            borderRadius: NaN,
            backgroundColor: Color.create(255, 255, 255, 255),
            paddingLeft: 1,
            paddingRight: 1,
            paddingBottom: 1,
            paddingTop: 1,
            marginLeft: 5,
            id: 20000,
            flexDirection: FlexLayout.FlexDirection.ROW,
            positionType: FlexLayout.PositionType.RELATIVE,
            alignSelf: FlexLayout.AlignSelf.CENTER,
            flexGrow: 1
          });
          var bet_1 = new BetTemplate(bet_1Style, "listviewTemplate");
          this.bet_1 = bet_1;

          return bet_1;
        }).call(this);
        layout_centerBottom.addChild(layout_centerBottom.children["bet_1"]);
        layout_centerBottom.children["bet_x"] = (function() {
          const bet_xStyle = getCombinedStyle(".flexLayout", {
            left: NaN,
            top: NaN,
            width: NaN,
            height: 25,
            borderRadius: NaN,
            backgroundColor: Color.create(255, 255, 255, 255),
            paddingLeft: 1,
            paddingRight: 1,
            paddingBottom: 1,
            paddingTop: 1,
            marginLeft: 10,
            id: 20001,
            flexDirection: FlexLayout.FlexDirection.ROW,
            positionType: FlexLayout.PositionType.RELATIVE,
            alignSelf: FlexLayout.AlignSelf.CENTER,
            flexGrow: 1
          });
          var bet_x = new BetTemplate(bet_xStyle, "listviewTemplate");
          this.bet_x = bet_x;

          return bet_x;
        }).call(this);
        layout_centerBottom.addChild(layout_centerBottom.children["bet_x"]);
        layout_centerBottom.children["bet_2"] = (function() {
          const bet_2Style = getCombinedStyle(".flexLayout", {
            left: NaN,
            top: NaN,
            width: NaN,
            height: 25,
            borderRadius: NaN,
            backgroundColor: Color.create(255, 255, 255, 255),
            paddingLeft: 1,
            paddingRight: 1,
            paddingBottom: 1,
            paddingTop: 1,
            marginLeft: 10,
            id: 20002,
            flexDirection: FlexLayout.FlexDirection.ROW,
            positionType: FlexLayout.PositionType.RELATIVE,
            alignSelf: FlexLayout.AlignSelf.CENTER,
            flexGrow: 1
          });
          var bet_2 = new BetTemplate(bet_2Style, "listviewTemplate");
          this.bet_2 = bet_2;

          return bet_2;
        }).call(this);
        layout_centerBottom.addChild(layout_centerBottom.children["bet_2"]);
        layout_centerBottom.children["betCount"] = (function() {
          const betCountStyle = getCombinedStyle(".flexLayout", {
            width: 25,
            height: NaN,
            backgroundColor: Color.create(0, 139, 0, 0),
            marginLeft: 20,
            left: NaN,
            marginRight: NaN,
            marginTop: 5,
            marginBottom: 5,
            id: 20003,
            paddingLeft: NaN,
            paddingRight: NaN,
            paddingBottom: NaN,
            paddingTop: NaN,
            alignSelf: FlexLayout.AlignSelf.AUTO,
            flexGrow: 0
          });
          var betCount = new FlexLayout(betCountStyle);
          this.betCount = betCount;
          betCount.children = {};
          betCount.children["imageView_betCount"] = (function() {
            const imageView_betCountStyle = getCombinedStyle(".imageView", {
              image: Image.createFromFile("images://betcount.png"),
              imageFillType: ImageFillType.STRETCH,
              width: NaN,
              height: NaN,
              id: 200004,
              flexGrow: 1,
              positionType: FlexLayout.PositionType.RELATIVE
            });
            var imageView_betCount = new ImageView(imageView_betCountStyle);

            return imageView_betCount;
          }).call(this);
          betCount.addChild(betCount.children["imageView_betCount"]);
          betCount.children["label_betCount"] = (function() {
            const label_betCountStyle = getCombinedStyle(".label", {
              width: 10,
              height: 10,
              right: 0,
              textColor: Color.create(255, 255, 255, 255),
              backgroundColor: Color.create(0, 255, 255, 255),
              text: "2",
              textAlignment: TextAlignment.MIDRIGHT,
              id: 200005,
              positionType: FlexLayout.PositionType.ABSOLUTE,
              font: Font.create(Font.DEFAULT, 7, Font.NORMAL)

            });
            var label_betCount = new Label(label_betCountStyle);
            if (label_betCountStyle.scrollEnabled === false)
              label_betCount.ios && (label_betCount.ios.scrollEnabled = false);
            this.label_betCount = label_betCount;

            return label_betCount;
          }).call(this);
          betCount.addChild(betCount.children["label_betCount"]);

          return betCount;
        }).call(this);
        layout_centerBottom.addChild(layout_centerBottom.children["betCount"]);

        return layout_centerBottom;
      }).call(this);
      layout_center.addChild(layout_center.children["layout_centerBottom"]);

      return layout_center;
    }).call(this);
    layout_rootBottom.addChild(layout_rootBottom.children["layout_center"]);

    //assign the children to listviewTemplate 
    this.children = Object.assign({}, {
      layout_rootTop: layout_rootTop,
      layout_rootBottom: layout_rootBottom
    });

  });

ListviewTemplate.defaults = getCombinedStyle(".flexLayout", {
  width: NaN,
  height: 85,
  minWidth: 320,
  id: 9,
  backgroundColor: Color.create(0, 255, 255, 255),
  alignSelf: FlexLayout.AlignSelf.AUTO,
  positionType: FlexLayout.PositionType.RELATIVE,
  flexGrow: 0
});

module && (module.exports = ListviewTemplate);