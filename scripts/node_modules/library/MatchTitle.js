//------------------------------------------------------------------------------
//
//     This code was auto generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//------------------------------------------------------------------------------

const extend = require('js-base/core/extend');
const FlexLayout = require('sf-core/ui/flexlayout');
const Color = require('sf-core/ui/color');
const Label = require('sf-core/ui/label');
const TextAlignment = require('sf-core/ui/textalignment');
const Font = require('sf-core/ui/font');

const getCombinedStyle = require("library/styler-builder").getCombinedStyle;

const MatchTitle = extend(FlexLayout)(
  //constructor
  function(_super, props) {
    // initalizes super class for this component scope
    _super(this, props);

    const flexLayout1Style = getCombinedStyle(".flexLayout", {
      width: NaN,
      height: 30,
      backgroundColor: Color.create(0, 255, 255, 255),
      flexDirection: FlexLayout.FlexDirection.ROW
    });
    var flexLayout1 = new FlexLayout(flexLayout1Style);
    this.addChild(flexLayout1);

    flexLayout1.children = {};
    flexLayout1.children["code"] = (function() {
      const codeStyle = getCombinedStyle(".label", {
        width: NaN,
        height: NaN,
        textAlignment: TextAlignment.MIDCENTER,
        textColor: Color.create(255, 240, 238, 52),
        backgroundColor: Color.create(0, 255, 255, 255),
        text: "475",
        flexGrow: 1,
        font: Font.create(Font.DEFAULT, 14, Font.BOLD)

      });
      var code = new Label(codeStyle);
      if (codeStyle.scrollEnabled === false)
        code.ios && (code.ios.scrollEnabled = false);
      this.code = code;

      return code;
    }).call(this);
    flexLayout1.addChild(flexLayout1.children["code"]);

    flexLayout1.children["match"] = (function() {
      const matchStyle = getCombinedStyle(".label", {
        width: NaN,
        height: NaN,
        text: "Fransa (U17) - Japonya (U17)",
        textColor: Color.create(255, 255, 255, 255),
        backgroundColor: Color.create(0, 255, 255, 255),
        flexGrow: 5,
        font: Font.create(Font.DEFAULT, 14, Font.BOLD)

      });
      var match = new Label(matchStyle);
      if (matchStyle.scrollEnabled === false)
        match.ios && (match.ios.scrollEnabled = false);
      this.match = match;

      return match;
    }).call(this);
    flexLayout1.addChild(flexLayout1.children["match"]);

    const flexLayout1_1Style = getCombinedStyle(".flexLayout", {
      width: NaN,
      height: NaN,
      backgroundColor: Color.create(0, 255, 255, 255),
      top: -5,
      flexDirection: FlexLayout.FlexDirection.ROW,
      flexGrow: 1
    });
    var flexLayout1_1 = new FlexLayout(flexLayout1_1Style);
    this.addChild(flexLayout1_1);

    flexLayout1_1.children = {};
    flexLayout1_1.children["label1"] = (function() {
      const label1Style = getCombinedStyle(".label", {
        width: NaN,
        height: NaN,
        textAlignment: TextAlignment.MIDCENTER,
        textColor: Color.create(255, 240, 238, 52),
        backgroundColor: Color.create(0, 255, 255, 255),
        text: "",
        flexGrow: 1,
        font: Font.create(Font.DEFAULT, 14, Font.BOLD)

      });
      var label1 = new Label(label1Style);
      if (label1Style.scrollEnabled === false)
        label1.ios && (label1.ios.scrollEnabled = false);

      return label1;
    }).call(this);
    flexLayout1_1.addChild(flexLayout1_1.children["label1"]);

    flexLayout1_1.children["league"] = (function() {
      const leagueStyle = getCombinedStyle(".label", {
        width: NaN,
        height: NaN,
        text: "U17 Dunya Kupasi",
        textColor: Color.create(255, 240, 238, 52),
        backgroundColor: Color.create(0, 255, 255, 255),
        textAlignment: TextAlignment.MIDLEFT,
        marginTop: -10,
        flexGrow: 5,
        font: Font.create(Font.DEFAULT, 11, Font.BOLD)

      });
      var league = new Label(leagueStyle);
      if (leagueStyle.scrollEnabled === false)
        league.ios && (league.ios.scrollEnabled = false);
      this.league = league;

      return league;
    }).call(this);
    flexLayout1_1.addChild(flexLayout1_1.children["league"]);

    //assign the children to matchTitle 
    this.children = Object.assign({}, {
      flexLayout1: flexLayout1,
      flexLayout1_1: flexLayout1_1
    });

  });

MatchTitle.defaults = getCombinedStyle(".flexLayout", {
  width: NaN,
  height: 60,
  backgroundColor: Color.create(255, 22, 23, 24),
  borderRadius: 10
});

module && (module.exports = MatchTitle);