//------------------------------------------------------------------------------
//
//     This code was auto generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//------------------------------------------------------------------------------

const extend = require('js-base/core/extend');
const FlexLayout = require('sf-core/ui/flexlayout');
const Color = require('sf-core/ui/color');
const Label = require('sf-core/ui/label');
const TextAlignment = require('sf-core/ui/textalignment');
const Font = require('sf-core/ui/font');

const BetTemplate = require("../../components/BetTemplate");

const getCombinedStyle = require("library/styler-builder").getCombinedStyle;

const SubBetListItem = extend(FlexLayout)(
  //constructor
  function(_super, props) {
    // initalizes super class for this component scope
    _super(this, props);

    const flexBetTitleStyle = getCombinedStyle(".flexLayout", {
      width: NaN,
      height: 30,
      marginLeft: 5,
      marginTop: 5,
      marginRight: 5,
      marginBottom: 5,
      borderRadius: 5,
      backgroundColor: Color.create(255, 255, 197, 6),
      id: 104,
      flexDirection: FlexLayout.FlexDirection.ROW
    });
    var flexBetTitle = new FlexLayout(flexBetTitleStyle);
    this.addChild(flexBetTitle);
    this.flexBetTitle = flexBetTitle;

    flexBetTitle.children = {};
    flexBetTitle.children["title"] = (function() {
      const titleStyle = getCombinedStyle(".label", {
        width: NaN,
        height: NaN,
        backgroundColor: Color.create(0, 255, 255, 255),
        textAlignment: TextAlignment.MIDCENTER,
        text: "Mac Sonucu",
        textColor: Color.create(255, 255, 255, 255),
        id: 1001,
        flexGrow: 1,
        font: Font.create(Font.DEFAULT, 15, Font.BOLD)

      });
      var title = new Label(titleStyle);
      if (titleStyle.scrollEnabled === false)
        title.ios && (title.ios.scrollEnabled = false);
      this.title = title;

      return title;
    }).call(this);
    flexBetTitle.addChild(flexBetTitle.children["title"]);

    flexBetTitle.children["flexLayout1"] = (function() {
      const flexLayout1Style = getCombinedStyle(".flexLayout", {
        width: 1,
        height: 20,
        backgroundColor: Color.create(51, 0, 0, 0),
        top: 5,
        bottom: NaN,
        id: 1002
      });
      var flexLayout1 = new FlexLayout(flexLayout1Style);

      return flexLayout1;
    }).call(this);
    flexBetTitle.addChild(flexBetTitle.children["flexLayout1"]);

    flexBetTitle.children["label1"] = (function() {
      const label1Style = getCombinedStyle(".label", {
        width: 30,
        height: NaN,
        text: "4",
        textAlignment: TextAlignment.MIDCENTER,
        backgroundColor: Color.create(0, 255, 255, 255),
        textColor: Color.create(255, 255, 255, 255),
        id: 1003,
        font: Font.create(Font.DEFAULT, 15, Font.BOLD)

      });
      var label1 = new Label(label1Style);
      if (label1Style.scrollEnabled === false)
        label1.ios && (label1.ios.scrollEnabled = false);

      return label1;
    }).call(this);
    flexBetTitle.addChild(flexBetTitle.children["label1"]);

    const flexBet1Style = getCombinedStyle(".flexLayout", {
      width: NaN,
      height: 40,
      left: NaN,
      right: NaN,
      marginLeft: 5,
      marginRight: 5,
      backgroundColor: Color.create(0, 255, 255, 255),
      marginBottom: 5,
      id: 105,
      flexDirection: FlexLayout.FlexDirection.ROW
    });
    var flexBet1 = new FlexLayout(flexBet1Style);
    this.addChild(flexBet1);
    this.flexBet1 = flexBet1;

    flexBet1.children = {};
    flexBet1.children["flexLayout2_2_2"] = (function() {
      const flexLayout2_2_2Style = getCombinedStyle(".flexLayout", {
        width: NaN,
        height: NaN,
        backgroundColor: Color.create(0, 255, 255, 255),
        id: 1011,
        flexGrow: 1
      });
      var flexLayout2_2_2 = new FlexLayout(flexLayout2_2_2Style);
      flexLayout2_2_2.children = {};
      flexLayout2_2_2.children["flexBet1_Item1"] = (function() {
        const flexBet1_Item1Style = getCombinedStyle(".flexLayout", {
          left: 0,
          top: 0,
          width: NaN,
          height: NaN,
          borderRadius: 8,
          backgroundColor: Color.create(255, 255, 255, 255),
          paddingLeft: 1,
          paddingRight: 1,
          paddingBottom: 1,
          paddingTop: 1,
          id: 10111,
          flexDirection: FlexLayout.FlexDirection.ROW,
          positionType: FlexLayout.PositionType.RELATIVE,
          flexGrow: 1
        });
        var flexBet1_Item1 = new BetTemplate(flexBet1_Item1Style, "subBetListItem");
        this.flexBet1_Item1 = flexBet1_Item1;

        return flexBet1_Item1;
      }).call(this);
      flexLayout2_2_2.addChild(flexLayout2_2_2.children["flexBet1_Item1"]);

      return flexLayout2_2_2;
    }).call(this);
    flexBet1.addChild(flexBet1.children["flexLayout2_2_2"]);

    flexBet1.children["flexLayout2_2_1"] = (function() {
      const flexLayout2_2_1Style = getCombinedStyle(".flexLayout", {
        width: NaN,
        height: NaN,
        backgroundColor: Color.create(0, 255, 255, 255),
        marginLeft: 5,
        marginRight: 5,
        marginTop: NaN,
        marginBottom: NaN,
        id: 1012,
        flexGrow: 1
      });
      var flexLayout2_2_1 = new FlexLayout(flexLayout2_2_1Style);
      flexLayout2_2_1.children = {};
      flexLayout2_2_1.children["flexBet1_Item2"] = (function() {
        const flexBet1_Item2Style = getCombinedStyle(".flexLayout", {
          left: 0,
          top: 0,
          width: NaN,
          height: NaN,
          borderRadius: 8,
          backgroundColor: Color.create(255, 255, 255, 255),
          paddingLeft: 1,
          paddingRight: 1,
          paddingBottom: 1,
          paddingTop: 1,
          id: 10121,
          flexDirection: FlexLayout.FlexDirection.ROW,
          positionType: FlexLayout.PositionType.RELATIVE,
          flexGrow: 1
        });
        var flexBet1_Item2 = new BetTemplate(flexBet1_Item2Style, "subBetListItem");
        this.flexBet1_Item2 = flexBet1_Item2;

        return flexBet1_Item2;
      }).call(this);
      flexLayout2_2_1.addChild(flexLayout2_2_1.children["flexBet1_Item2"]);

      return flexLayout2_2_1;
    }).call(this);
    flexBet1.addChild(flexBet1.children["flexLayout2_2_1"]);

    flexBet1.children["flexLayout2_2"] = (function() {
      const flexLayout2_2Style = getCombinedStyle(".flexLayout", {
        width: NaN,
        height: NaN,
        backgroundColor: Color.create(0, 255, 255, 255),
        right: NaN,
        left: NaN,
        marginLeft: NaN,
        id: 1013,
        flexGrow: 1
      });
      var flexLayout2_2 = new FlexLayout(flexLayout2_2Style);
      flexLayout2_2.children = {};
      flexLayout2_2.children["flexBet1_Item3"] = (function() {
        const flexBet1_Item3Style = getCombinedStyle(".flexLayout", {
          left: 0,
          top: 0,
          width: NaN,
          height: NaN,
          borderRadius: 8,
          backgroundColor: Color.create(255, 255, 255, 255),
          paddingLeft: 1,
          paddingRight: 1,
          paddingBottom: 1,
          paddingTop: 1,
          id: 10131,
          flexDirection: FlexLayout.FlexDirection.ROW,
          positionType: FlexLayout.PositionType.RELATIVE,
          flexGrow: 1
        });
        var flexBet1_Item3 = new BetTemplate(flexBet1_Item3Style, "subBetListItem");
        this.flexBet1_Item3 = flexBet1_Item3;

        return flexBet1_Item3;
      }).call(this);
      flexLayout2_2.addChild(flexLayout2_2.children["flexBet1_Item3"]);

      return flexLayout2_2;
    }).call(this);
    flexBet1.addChild(flexBet1.children["flexLayout2_2"]);

    const flexBet2Style = getCombinedStyle(".flexLayout", {
      width: NaN,
      height: 40,
      left: NaN,
      right: NaN,
      marginLeft: 5,
      marginRight: 5,
      backgroundColor: Color.create(0, 255, 255, 255),
      marginBottom: 5,
      id: 106,
      flexDirection: FlexLayout.FlexDirection.ROW
    });
    var flexBet2 = new FlexLayout(flexBet2Style);
    this.addChild(flexBet2);
    this.flexBet2 = flexBet2;

    flexBet2.children = {};
    flexBet2.children["flexLayout2_2_2"] = (function() {
      const flexLayout2_2_2Style = getCombinedStyle(".flexLayout", {
        width: NaN,
        height: NaN,
        backgroundColor: Color.create(0, 255, 255, 255),
        id: 1021,
        flexGrow: 1
      });
      var flexLayout2_2_2 = new FlexLayout(flexLayout2_2_2Style);
      flexLayout2_2_2.children = {};
      flexLayout2_2_2.children["flexBet2_Item1"] = (function() {
        const flexBet2_Item1Style = getCombinedStyle(".flexLayout", {
          left: 0,
          top: 0,
          width: NaN,
          height: NaN,
          borderRadius: 8,
          backgroundColor: Color.create(255, 255, 255, 255),
          paddingLeft: 1,
          paddingRight: 1,
          paddingBottom: 1,
          paddingTop: 1,
          id: 10211,
          flexDirection: FlexLayout.FlexDirection.ROW,
          positionType: FlexLayout.PositionType.RELATIVE,
          flexGrow: 1
        });
        var flexBet2_Item1 = new BetTemplate(flexBet2_Item1Style, "subBetListItem");
        this.flexBet2_Item1 = flexBet2_Item1;

        return flexBet2_Item1;
      }).call(this);
      flexLayout2_2_2.addChild(flexLayout2_2_2.children["flexBet2_Item1"]);

      return flexLayout2_2_2;
    }).call(this);
    flexBet2.addChild(flexBet2.children["flexLayout2_2_2"]);

    flexBet2.children["flexLayout2_2_1"] = (function() {
      const flexLayout2_2_1Style = getCombinedStyle(".flexLayout", {
        width: NaN,
        height: NaN,
        backgroundColor: Color.create(0, 255, 255, 255),
        marginLeft: 5,
        marginRight: 5,
        marginTop: NaN,
        marginBottom: NaN,
        id: 1022,
        flexGrow: 1
      });
      var flexLayout2_2_1 = new FlexLayout(flexLayout2_2_1Style);
      flexLayout2_2_1.children = {};
      flexLayout2_2_1.children["flexBet2_Item2"] = (function() {
        const flexBet2_Item2Style = getCombinedStyle(".flexLayout", {
          left: 0,
          top: 0,
          width: NaN,
          height: NaN,
          borderRadius: 8,
          backgroundColor: Color.create(255, 255, 255, 255),
          paddingLeft: 1,
          paddingRight: 1,
          paddingBottom: 1,
          paddingTop: 1,
          id: 10221,
          flexDirection: FlexLayout.FlexDirection.ROW,
          positionType: FlexLayout.PositionType.RELATIVE,
          flexGrow: 1
        });
        var flexBet2_Item2 = new BetTemplate(flexBet2_Item2Style, "subBetListItem");
        this.flexBet2_Item2 = flexBet2_Item2;

        return flexBet2_Item2;
      }).call(this);
      flexLayout2_2_1.addChild(flexLayout2_2_1.children["flexBet2_Item2"]);

      return flexLayout2_2_1;
    }).call(this);
    flexBet2.addChild(flexBet2.children["flexLayout2_2_1"]);

    flexBet2.children["flexLayout2_2"] = (function() {
      const flexLayout2_2Style = getCombinedStyle(".flexLayout", {
        width: NaN,
        height: NaN,
        backgroundColor: Color.create(0, 255, 255, 255),
        right: NaN,
        left: NaN,
        marginLeft: NaN,
        id: 1023,
        flexGrow: 1
      });
      var flexLayout2_2 = new FlexLayout(flexLayout2_2Style);
      flexLayout2_2.children = {};
      flexLayout2_2.children["flexBet2_Item3"] = (function() {
        const flexBet2_Item3Style = getCombinedStyle(".flexLayout", {
          left: 0,
          top: 0,
          width: NaN,
          height: NaN,
          borderRadius: 8,
          backgroundColor: Color.create(255, 255, 255, 255),
          paddingLeft: 1,
          paddingRight: 1,
          paddingBottom: 1,
          paddingTop: 1,
          id: 10231,
          flexDirection: FlexLayout.FlexDirection.ROW,
          positionType: FlexLayout.PositionType.RELATIVE,
          flexGrow: 1
        });
        var flexBet2_Item3 = new BetTemplate(flexBet2_Item3Style, "subBetListItem");
        this.flexBet2_Item3 = flexBet2_Item3;

        return flexBet2_Item3;
      }).call(this);
      flexLayout2_2.addChild(flexLayout2_2.children["flexBet2_Item3"]);

      return flexLayout2_2;
    }).call(this);
    flexBet2.addChild(flexBet2.children["flexLayout2_2"]);

    const flexBet3Style = getCombinedStyle(".flexLayout", {
      width: NaN,
      height: 40,
      left: NaN,
      right: NaN,
      marginLeft: 5,
      marginRight: 5,
      backgroundColor: Color.create(0, 255, 255, 255),
      marginBottom: 5,
      id: 107,
      flexDirection: FlexLayout.FlexDirection.ROW
    });
    var flexBet3 = new FlexLayout(flexBet3Style);
    this.addChild(flexBet3);
    this.flexBet3 = flexBet3;

    flexBet3.children = {};
    flexBet3.children["flexLayout2_2_2"] = (function() {
      const flexLayout2_2_2Style = getCombinedStyle(".flexLayout", {
        width: NaN,
        height: NaN,
        backgroundColor: Color.create(0, 255, 255, 255),
        id: 1031,
        flexGrow: 1
      });
      var flexLayout2_2_2 = new FlexLayout(flexLayout2_2_2Style);
      flexLayout2_2_2.children = {};
      flexLayout2_2_2.children["flexBet3_Item1"] = (function() {
        const flexBet3_Item1Style = getCombinedStyle(".flexLayout", {
          left: 0,
          top: 0,
          width: NaN,
          height: NaN,
          borderRadius: 8,
          backgroundColor: Color.create(255, 255, 255, 255),
          paddingLeft: 1,
          paddingRight: 1,
          paddingBottom: 1,
          paddingTop: 1,
          id: 10311,
          flexDirection: FlexLayout.FlexDirection.ROW,
          positionType: FlexLayout.PositionType.RELATIVE,
          flexGrow: 1
        });
        var flexBet3_Item1 = new BetTemplate(flexBet3_Item1Style, "subBetListItem");
        this.flexBet3_Item1 = flexBet3_Item1;

        return flexBet3_Item1;
      }).call(this);
      flexLayout2_2_2.addChild(flexLayout2_2_2.children["flexBet3_Item1"]);

      return flexLayout2_2_2;
    }).call(this);
    flexBet3.addChild(flexBet3.children["flexLayout2_2_2"]);

    flexBet3.children["flexLayout2_2_1"] = (function() {
      const flexLayout2_2_1Style = getCombinedStyle(".flexLayout", {
        width: NaN,
        height: NaN,
        backgroundColor: Color.create(0, 255, 255, 255),
        marginLeft: 5,
        marginRight: 5,
        marginTop: NaN,
        marginBottom: NaN,
        id: 1032,
        flexGrow: 1
      });
      var flexLayout2_2_1 = new FlexLayout(flexLayout2_2_1Style);
      flexLayout2_2_1.children = {};
      flexLayout2_2_1.children["flexBet3_Item2"] = (function() {
        const flexBet3_Item2Style = getCombinedStyle(".flexLayout", {
          left: 0,
          top: 0,
          width: NaN,
          height: NaN,
          borderRadius: 8,
          backgroundColor: Color.create(255, 255, 255, 255),
          paddingLeft: 1,
          paddingRight: 1,
          paddingBottom: 1,
          paddingTop: 1,
          id: 10321,
          flexDirection: FlexLayout.FlexDirection.ROW,
          positionType: FlexLayout.PositionType.RELATIVE,
          flexGrow: 1
        });
        var flexBet3_Item2 = new BetTemplate(flexBet3_Item2Style, "subBetListItem");
        this.flexBet3_Item2 = flexBet3_Item2;

        return flexBet3_Item2;
      }).call(this);
      flexLayout2_2_1.addChild(flexLayout2_2_1.children["flexBet3_Item2"]);

      return flexLayout2_2_1;
    }).call(this);
    flexBet3.addChild(flexBet3.children["flexLayout2_2_1"]);

    flexBet3.children["flexLayout2_2"] = (function() {
      const flexLayout2_2Style = getCombinedStyle(".flexLayout", {
        width: NaN,
        height: NaN,
        backgroundColor: Color.create(0, 255, 255, 255),
        right: NaN,
        left: NaN,
        marginLeft: NaN,
        id: 1033,
        flexGrow: 1
      });
      var flexLayout2_2 = new FlexLayout(flexLayout2_2Style);
      flexLayout2_2.children = {};
      flexLayout2_2.children["flexBet3_Item3"] = (function() {
        const flexBet3_Item3Style = getCombinedStyle(".flexLayout", {
          left: 0,
          top: 0,
          width: NaN,
          height: NaN,
          borderRadius: 8,
          backgroundColor: Color.create(255, 255, 255, 255),
          paddingLeft: 1,
          paddingRight: 1,
          paddingBottom: 1,
          paddingTop: 1,
          id: 10331,
          flexDirection: FlexLayout.FlexDirection.ROW,
          positionType: FlexLayout.PositionType.RELATIVE,
          flexGrow: 1
        });
        var flexBet3_Item3 = new BetTemplate(flexBet3_Item3Style, "subBetListItem");
        this.flexBet3_Item3 = flexBet3_Item3;

        return flexBet3_Item3;
      }).call(this);
      flexLayout2_2.addChild(flexLayout2_2.children["flexBet3_Item3"]);

      return flexLayout2_2;
    }).call(this);
    flexBet3.addChild(flexBet3.children["flexLayout2_2"]);

    //assign the children to subBetListItem 
    this.children = Object.assign({}, {
      flexBetTitle: flexBetTitle,
      flexBet1: flexBet1,
      flexBet2: flexBet2,
      flexBet3: flexBet3
    });

  });

SubBetListItem.defaults = getCombinedStyle(".flexLayout", {
  width: NaN,
  height: 180,
  backgroundColor: Color.create(0, 255, 255, 255)
});

module && (module.exports = SubBetListItem);