//------------------------------------------------------------------------------
//
//     This code was auto generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//------------------------------------------------------------------------------

const extend = require('js-base/core/extend');
const FlexLayout = require('sf-core/ui/flexlayout');
const Color = require('sf-core/ui/color');
const Label = require('sf-core/ui/label');
const TextAlignment = require('sf-core/ui/textalignment');
const Font = require('sf-core/ui/font');

const getCombinedStyle = require("library/styler-builder").getCombinedStyle;

const Statics = extend(FlexLayout)(
  //constructor
  function(_super, props) {
    // initalizes super class for this component scope
    _super(this, props);

    const label1Style = getCombinedStyle(".label", {
      width: 30,
      height: NaN,
      text: "#",
      textAlignment: TextAlignment.MIDCENTER,
      backgroundColor: Color.create(0, 255, 255, 255),
      flexGrow: 0,
      font: Font.create(Font.DEFAULT, 12, Font.BOLD)

    });
    var label1 = new Label(label1Style);
    if (label1Style.scrollEnabled === false)
      label1.ios && (label1.ios.scrollEnabled = false);
    this.addChild(label1);

    const flexLayout2Style = getCombinedStyle(".flexLayout", {
      width: 1,
      height: NaN,
      borderColor: Color.create(255, 234, 234, 234),
      backgroundColor: Color.create(255, 234, 234, 234)
    });
    var flexLayout2 = new FlexLayout(flexLayout2Style);
    this.addChild(flexLayout2);

    const label2Style = getCombinedStyle(".label", {
      width: NaN,
      height: NaN,
      left: 5,
      text: "Takim",
      backgroundColor: Color.create(0, 255, 255, 255),
      right: 10,
      flexGrow: 1,
      font: Font.create(Font.DEFAULT, 12, Font.BOLD)

    });
    var label2 = new Label(label2Style);
    if (label2Style.scrollEnabled === false)
      label2.ios && (label2.ios.scrollEnabled = false);
    this.addChild(label2);

    const flexLayout2_1Style = getCombinedStyle(".flexLayout", {
      width: 1,
      height: NaN,
      borderColor: Color.create(255, 234, 234, 234),
      backgroundColor: Color.create(255, 234, 234, 234)
    });
    var flexLayout2_1 = new FlexLayout(flexLayout2_1Style);
    this.addChild(flexLayout2_1);

    const label1_1Style = getCombinedStyle(".label", {
      width: 25,
      height: NaN,
      text: "O",
      textAlignment: TextAlignment.MIDCENTER,
      backgroundColor: Color.create(0, 255, 255, 255),
      flexGrow: 0,
      font: Font.create(Font.DEFAULT, 12, Font.BOLD)

    });
    var label1_1 = new Label(label1_1Style);
    if (label1_1Style.scrollEnabled === false)
      label1_1.ios && (label1_1.ios.scrollEnabled = false);
    this.addChild(label1_1);

    const flexLayout2_1_1Style = getCombinedStyle(".flexLayout", {
      width: 1,
      height: NaN,
      borderColor: Color.create(255, 234, 234, 234),
      backgroundColor: Color.create(255, 234, 234, 234)
    });
    var flexLayout2_1_1 = new FlexLayout(flexLayout2_1_1Style);
    this.addChild(flexLayout2_1_1);

    const label1_2Style = getCombinedStyle(".label", {
      width: 25,
      height: NaN,
      text: "G",
      textAlignment: TextAlignment.MIDCENTER,
      backgroundColor: Color.create(0, 255, 255, 255),
      textColor: Color.create(255, 165, 205, 55),
      flexGrow: 0,
      font: Font.create(Font.DEFAULT, 12, Font.BOLD)

    });
    var label1_2 = new Label(label1_2Style);
    if (label1_2Style.scrollEnabled === false)
      label1_2.ios && (label1_2.ios.scrollEnabled = false);
    this.addChild(label1_2);

    const flexLayout2_1_1_1Style = getCombinedStyle(".flexLayout", {
      width: 1,
      height: NaN,
      borderColor: Color.create(255, 234, 234, 234),
      backgroundColor: Color.create(255, 234, 234, 234)
    });
    var flexLayout2_1_1_1 = new FlexLayout(flexLayout2_1_1_1Style);
    this.addChild(flexLayout2_1_1_1);

    const label1_2_1Style = getCombinedStyle(".label", {
      width: 25,
      height: NaN,
      text: "B",
      textAlignment: TextAlignment.MIDCENTER,
      backgroundColor: Color.create(0, 255, 255, 255),
      textColor: Color.create(255, 250, 156, 46),
      flexGrow: 0,
      font: Font.create(Font.DEFAULT, 12, Font.BOLD)

    });
    var label1_2_1 = new Label(label1_2_1Style);
    if (label1_2_1Style.scrollEnabled === false)
      label1_2_1.ios && (label1_2_1.ios.scrollEnabled = false);
    this.addChild(label1_2_1);

    const flexLayout2_1_1_1_1Style = getCombinedStyle(".flexLayout", {
      width: 1,
      height: NaN,
      borderColor: Color.create(255, 234, 234, 234),
      backgroundColor: Color.create(255, 234, 234, 234)
    });
    var flexLayout2_1_1_1_1 = new FlexLayout(flexLayout2_1_1_1_1Style);
    this.addChild(flexLayout2_1_1_1_1);

    const label1_2_1_1Style = getCombinedStyle(".label", {
      width: 25,
      height: NaN,
      text: "M",
      textAlignment: TextAlignment.MIDCENTER,
      backgroundColor: Color.create(0, 255, 255, 255),
      textColor: Color.create(255, 246, 40, 55),
      flexGrow: 0,
      font: Font.create(Font.DEFAULT, 12, Font.BOLD)

    });
    var label1_2_1_1 = new Label(label1_2_1_1Style);
    if (label1_2_1_1Style.scrollEnabled === false)
      label1_2_1_1.ios && (label1_2_1_1.ios.scrollEnabled = false);
    this.addChild(label1_2_1_1);

    const flexLayout2_1_1_1_1_1Style = getCombinedStyle(".flexLayout", {
      width: 1,
      height: NaN,
      borderColor: Color.create(255, 234, 234, 234),
      backgroundColor: Color.create(255, 234, 234, 234)
    });
    var flexLayout2_1_1_1_1_1 = new FlexLayout(flexLayout2_1_1_1_1_1Style);
    this.addChild(flexLayout2_1_1_1_1_1);

    const label1_2_1_1_2Style = getCombinedStyle(".label", {
      width: 30,
      height: NaN,
      text: "A-Y",
      textAlignment: TextAlignment.MIDCENTER,
      backgroundColor: Color.create(0, 255, 255, 255),
      flexGrow: 0,
      font: Font.create(Font.DEFAULT, 12, Font.BOLD)

    });
    var label1_2_1_1_2 = new Label(label1_2_1_1_2Style);
    if (label1_2_1_1_2Style.scrollEnabled === false)
      label1_2_1_1_2.ios && (label1_2_1_1_2.ios.scrollEnabled = false);
    this.addChild(label1_2_1_1_2);

    const flexLayout2_1_1_1_1_1_1Style = getCombinedStyle(".flexLayout", {
      width: 1,
      height: NaN,
      borderColor: Color.create(255, 234, 234, 234),
      backgroundColor: Color.create(255, 234, 234, 234)
    });
    var flexLayout2_1_1_1_1_1_1 = new FlexLayout(flexLayout2_1_1_1_1_1_1Style);
    this.addChild(flexLayout2_1_1_1_1_1_1);

    const label1_2_1_1_2_1Style = getCombinedStyle(".label", {
      width: 30,
      height: NaN,
      text: "AV",
      textAlignment: TextAlignment.MIDCENTER,
      backgroundColor: Color.create(0, 255, 255, 255),
      flexGrow: 0,
      font: Font.create(Font.DEFAULT, 12, Font.BOLD)

    });
    var label1_2_1_1_2_1 = new Label(label1_2_1_1_2_1Style);
    if (label1_2_1_1_2_1Style.scrollEnabled === false)
      label1_2_1_1_2_1.ios && (label1_2_1_1_2_1.ios.scrollEnabled = false);
    this.addChild(label1_2_1_1_2_1);

    const flexLayout2_1_1_1_1_1_1_1Style = getCombinedStyle(".flexLayout", {
      width: 1,
      height: NaN,
      borderColor: Color.create(255, 234, 234, 234),
      backgroundColor: Color.create(255, 234, 234, 234)
    });
    var flexLayout2_1_1_1_1_1_1_1 = new FlexLayout(flexLayout2_1_1_1_1_1_1_1Style);
    this.addChild(flexLayout2_1_1_1_1_1_1_1);

    const label1_2_1_1_1Style = getCombinedStyle(".label", {
      width: 25,
      height: NaN,
      text: "P",
      textAlignment: TextAlignment.MIDCENTER,
      backgroundColor: Color.create(0, 255, 255, 255),
      flexGrow: 0,
      font: Font.create(Font.DEFAULT, 12, Font.BOLD)

    });
    var label1_2_1_1_1 = new Label(label1_2_1_1_1Style);
    if (label1_2_1_1_1Style.scrollEnabled === false)
      label1_2_1_1_1.ios && (label1_2_1_1_1.ios.scrollEnabled = false);
    this.addChild(label1_2_1_1_1);

    const flexLayout1Style = getCombinedStyle(".flexLayout", {
      backgroundColor: Color.create(255, 234, 234, 234),
      marginBottom: NaN,
      marginLeft: NaN,
      marginRight: NaN,
      width: NaN,
      height: 1,
      left: 0,
      right: 0,
      bottom: 0,
      positionType: FlexLayout.PositionType.ABSOLUTE
    });
    var flexLayout1 = new FlexLayout(flexLayout1Style);
    this.addChild(flexLayout1);

    //assign the children to statics 
    this.children = Object.assign({}, {
      label1: label1,
      flexLayout2: flexLayout2,
      label2: label2,
      flexLayout2_1: flexLayout2_1,
      label1_1: label1_1,
      flexLayout2_1_1: flexLayout2_1_1,
      label1_2: label1_2,
      flexLayout2_1_1_1: flexLayout2_1_1_1,
      label1_2_1: label1_2_1,
      flexLayout2_1_1_1_1: flexLayout2_1_1_1_1,
      label1_2_1_1: label1_2_1_1,
      flexLayout2_1_1_1_1_1: flexLayout2_1_1_1_1_1,
      label1_2_1_1_2: label1_2_1_1_2,
      flexLayout2_1_1_1_1_1_1: flexLayout2_1_1_1_1_1_1,
      label1_2_1_1_2_1: label1_2_1_1_2_1,
      flexLayout2_1_1_1_1_1_1_1: flexLayout2_1_1_1_1_1_1_1,
      label1_2_1_1_1: label1_2_1_1_1,
      flexLayout1: flexLayout1
    });

  });

Statics.defaults = getCombinedStyle(".flexLayout", {
  height: 30,
  width: NaN,
  backgroundColor: Color.create(255, 248, 248, 248),
  flexDirection: FlexLayout.FlexDirection.ROW
});

module && (module.exports = Statics);